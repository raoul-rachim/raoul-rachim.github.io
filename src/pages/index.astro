---
import Layout from '../layouts/Layout.astro';

async function loadRecords(): Promise<Array<{
    Title?: string,
    SubTitle?: string,
    VideoURL?: string,
    VideoCaption?: string,
    Date?: string,
    Tags?: Array<string>,
    Content?: string
}>> {
    const response = await fetch(
        "https://docs.google.com/spreadsheets/d/1IH23jkQsvjR_OXBCVdqrfm_JqajztWLkf0zAhjcod2U/gviz/tq?tqx=out:json"
    );
    const text = await response.text();
    const json = JSON.parse(text.substring(47).slice(0, -2));
    const columns = json.table.cols.map(c => c.label);
    const records = [];
    for (const row of json.table.rows) {
        const cols = row.c;
        const data = {};
        for (let i = 0; i < columns.length; ++i) {
            const colKey = columns[i];
            data[colKey] = cols[i]?.v ?? ''
            if (colKey === 'Tags') {
                data[colKey] = data[colKey].split(' ').filter(i => i.trim().length > 0);
            }
            if (colKey === 'VideoURL') {
                data[colKey] = extractYouTubeVideoID(data[colKey]);
            }
            if(colKey === 'Date'){
                data[colKey] = formatCustomDate(data[colKey]);
            }
        }
        records.push(data);
    }
    return records;
}

function extractYouTubeVideoID(url) {
    try {
        const parsedUrl = new URL(url);
        const hostname = parsedUrl.hostname.replace('www.', '');
        let videoId = '';

        // Handle different YouTube URL formats
        if (hostname === 'youtube.com' || hostname === 'm.youtube.com') {
            if (parsedUrl.pathname === '/watch') {
                videoId = parsedUrl.searchParams.get('v');
            } else if (parsedUrl.pathname.startsWith('/shorts/')) {
                videoId = parsedUrl.pathname.split('/shorts/')[1].split('/')[0];
            } else if (parsedUrl.pathname.startsWith('/embed/')) {
                videoId = parsedUrl.pathname.split('/embed/')[1];
            }
        } else if (hostname === 'youtu.be') {
            videoId = parsedUrl.pathname.slice(1);
        }

        // Ensure it's a valid YouTube ID (11 characters, alphanumeric and underscores)
        if (videoId && /^[\w-]{11}$/.test(videoId)) {
            return videoId;
        } else {
            return null;
        }
    } catch (error) {
        return null;
    }
}

function formatCustomDate(input) {
    const match = input.match(/Date\((\d+),(\d+),(\d+)\)/);
    if (!match) return null;

    const [_, year, month, day] = match.map(Number);
    const date = new Date(year, month, day);

    const dayStr = customPadStart(date.getDate(),2,'0');
    const monthStr = date.toLocaleString('en-US', { month: 'short' }).toUpperCase();
    const yearStr = date.getFullYear();

    return `${dayStr}-${monthStr}-${yearStr}`;
}
function customPadStart(str, targetLength, padChar = ' ') {
    str = String(str);
    padChar = String(padChar);

    if (str.length >= targetLength) return str;

    const padLength = targetLength - str.length;
    const repeatCount = Math.ceil(padLength / padChar.length);
    const fullPad = padChar.repeat(repeatCount).slice(0, padLength);

    return fullPad + str;
}

const records = await loadRecords();
---
<Layout>

    <section class="hero">
        <div class="container">
            <h1>Hi, I'm <span class="highlight">Raoul Rachim</span> ðŸ‘‹</h1>
            <p>I'm a 12-year-old student at Dubai International Academy with big dreams and bold goals.</p>
            <p>I love <strong>cooking</strong>, practicing <strong>judo</strong>, and racing in the
                <strong>pool</strong>.</p>
            <p>I'm also sharpening my skills in <strong>finance</strong>, <strong>public speaking</strong>, and learning
                <strong>French</strong>.</p>
            <a href="/about" class="btn">Learn More About Me</a>
        </div>
    </section>
    {records.map((record) => {
        return (
                <article class="achievement">
                    <header>
                        <h2 class="achievement-title">{record.Title}</h2>
                        <p class="achievement-subtitle">{record.SubTitle}</p>
                        <time class="achievement-date" datetime="2025-04-01">{record.Date}</time>
                    </header>

                    <section class="achievement-description">
                        <p>
                            {record.Content}
                        </p>
                    </section>

                    <section class="achievement-media">
                        <figure class="achievement-video">
                            <iframe src={`https://www.youtube.com/embed/${record.VideoURL}?autoplay=0&modestbranding=1&showinfo=0`}
                                    frameborder="0"
                                    allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                                    allowfullscreen width="360" height="640">
                            </iframe>
                            <figcaption>{record.VideoCaption}</figcaption>
                        </figure>
                    </section>
                    {record.Tags && record.Tags.length > 0 && (
                            <footer class="achievement-tags">
                                <ul>
                                    {(record.Tags ?? []).map(tag => {
                                        return (
                                                <li><a href={`tags/${tag}`}>{tag}</a></li>)
                                    })}
                                </ul>
                            </footer>
                    )}
                </article>)
    })}
</Layout>



